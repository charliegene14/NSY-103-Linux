<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[NSY103 - DENIER Charlie]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>NSY103 - DENIER Charlie</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 13 Feb 2025 23:04:28 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 13 Feb 2025 23:04:23 GMT</pubDate><copyright><![CDATA[DENIER Charlie]]></copyright><ttl>60</ttl><dc:creator>DENIER Charlie</dc:creator><item><title><![CDATA[Fonctionnement g√©n√©ral et architecture]]></title><description><![CDATA[ 
 <br><br><br>
<br><a data-tooltip-position="top" aria-label="3. Fonctionnement/3.1. Aper√ßu global.md" data-href="3. Fonctionnement/3.1. Aper√ßu global.md" href="3.-fonctionnement/3.1.-aper√ßu-global.html" class="internal-link" target="_self" rel="noopener nofollow">3.1. Aper√ßu global du syst√®me</a>
<br><a data-tooltip-position="top" aria-label="3. Fonctionnement/3.2. Interface de gestion des clients.md" data-href="3. Fonctionnement/3.2. Interface de gestion des clients.md" href="3.-fonctionnement/3.2.-interface-de-gestion-des-clients.html" class="internal-link" target="_self" rel="noopener nofollow">3.2. Interface de gestion de clients</a>
<br><a data-tooltip-position="top" aria-label="3. Fonctionnement/3.3. Communication r√©seau.md" data-href="3. Fonctionnement/3.3. Communication r√©seau.md" href="3.-fonctionnement/3.3.-communication-r√©seau.html" class="internal-link" target="_self" rel="noopener nofollow">3.3. Communication r√©seau</a>
<br><a data-tooltip-position="top" aria-label="3. Fonctionnement/3.4. Gestion du risque d'inter-blocage.md" data-href="3. Fonctionnement/3.4. Gestion du risque d'inter-blocage.md" href="3.-fonctionnement/3.4.-gestion-du-risque-d'inter-blocage.html" class="internal-link" target="_self" rel="noopener nofollow">3.4. Gestion du risque d'inter-blocage</a>
<br><a data-tooltip-position="top" aria-label="3. Fonctionnement/3.5. Ajout de philosophes.md" data-href="3. Fonctionnement/3.5. Ajout de philosophes.md" href="3.-fonctionnement/3.5.-ajout-de-philosophes.html" class="internal-link" target="_self" rel="noopener nofollow">3.5. Ajout de philosophes</a>
<br><a data-tooltip-position="top" aria-label="3.6. Mise √† jour d'un philosophe" data-href="3.6. Mise √† jour d'un philosophe" href="3.-fonctionnement/3.6.-mise-√†-jour-d'un-philosophe.html" class="internal-link" target="_self" rel="noopener nofollow">3.6. Mise √† jour d'un philosophe</a>
]]></description><link>3.-fonctionnement/3.0.-index.html</link><guid isPermaLink="false">3. Fonctionnement/3.0. Index.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 19:11:33 GMT</pubDate></item><item><title><![CDATA[3.1. Aper√ßu global]]></title><description><![CDATA[ 
 <br><br><br><br>(scroll de gauche √† droite)<br>
<br>Chaque philosophe c√¥t√© client vie dans son thread
<br>Ils communiquent avec le serveur avec chacun leur socket client 
<br>Le serveur dispose d'un processus fils de service par client
<br>Le processus serveur principal dispose d'un thread de logs g√©n√©raux (lit type=1 dans la file)
<br>Il cr√©√© ensuite un thread de log par client (lit type=PID dans la file)
<br>Ce sch√©ma ne mentionne pas la m√©moire partag√©e, elle est abord√©e dans d'autres parties.
<br><br>
<br>Un processus fils d√©di√© √† chaque client garantit l'isolation des traitements et permet de g√©rer plusieurs clients en parall√®le.
<br>Les threads de logs √©vitent les blocages en assurant un enregistrement asynchrone des messages.
<br><br><br><br><br><br>D√®s l'initialisation, une structure <a href="doxygen/_server_context_8h.html" target="_blank" rel="noopener nofollow">ServerContext</a> est cr√©√© pour y accueillir toutes les ressources et informations utilis√©es qui devront √™tre d√©truites √† la fin du processus (m√©canismes IPC, s√©maphores, etc). Leur centralisation facilite leur gestion notamment lors de la destruction.<br>Un signal handler a donc d'abord √©t√© initialis√© pour recevoir les signaux SIGINT (interruption du processus) et SIGSEGV (segmentation fault), ce dernier a √©t√© surtout utile pour le d√©veloppement üôÇ<br>Lorsque le signal est re√ßu, le processus principal quitte la boucle d'acceptation des connexions et les threads quittent leur boucle √©galement.<br><br>La m√©moire partag√©e est cr√©√©e et attach√©e qu'une seule fois au lancement du serveur, et elle contient une structure <a href="doxygen/_shared_resources_8h.html" target="_blank" rel="noopener nofollow">SharedResources</a>.<br>Chaque ressource ajout√©e √† la structure est donc imm√©diatement disponible par tous les processus fils.]]></description><link>3.-fonctionnement/3.1.-aper√ßu-global.html</link><guid isPermaLink="false">3. Fonctionnement/3.1. Aper√ßu global.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 22:11:37 GMT</pubDate></item><item><title><![CDATA[3.2. Interface de gestion des clients]]></title><description><![CDATA[ 
 <br><br><br>Dans <a href="doxygen/main_8c.html" target="_blank" rel="noopener nofollow">src/main</a>, une boucle infinie g√®re l'ajout des philosophes par la prise de commande. Chaque client connect√© vie dans son thread, la raison est purement p√©dagogique.<br><br><br><br>Dans la boucle for d'ajout de clients, en cas de probl√®me, on se contente d'annuler l'ajout du philosophe et tous les suivants pour √©viter de cr√©er un vide dans l'index des philosophes c√¥t√© client, et on revient dans la boucle de prise de commande.<br><br><br><br>Le philosophe fait passer une seconde (sleep) et r√©duit son √©tat (THINKING ou EATING) de 1.<br>Si le d√©compte est arriv√© √† 0, il passe : <br>
<br>de THINKING √† HUNGRY
<br>de EATING √† THINKING et s'attribue un timer al√©atoire
<br>Il informe le serveur de la mise √† jour de son √©tat avec une requ√™te REQUEST_UPDATE.<br>S'il est pass√© √† HUNGRY, il attend une r√©ponse du serveur qui va v√©rifier et lui accorder l'autorisation (voir <a data-href="3.6. Mise √† jour d'un philosophe" href="3.-fonctionnement/3.6.-mise-√†-jour-d'un-philosophe.html" class="internal-link" target="_self" rel="noopener nofollow">3.6. Mise √† jour d'un philosophe</a>). Sinon il peut reprendre sa boucle.<br>]]></description><link>3.-fonctionnement/3.2.-interface-de-gestion-des-clients.html</link><guid isPermaLink="false">3. Fonctionnement/3.2. Interface de gestion des clients.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 22:12:23 GMT</pubDate></item><item><title><![CDATA[3.3. Communication r√©seau]]></title><description><![CDATA[ 
 <br><br><br>Pour faciliter la communication, deux structures <a href="doxygen/struct_request.html" target="_blank" rel="noopener nofollow">Request</a> et <a href="doxygen/struct_response.html" target="_blank" rel="noopener nofollow">Response</a> sont utilis√©es, et une √©num√©ration du type de r√©ponse et du type de requ√™te.<br>Chaque tentative de r√©ception d'une r√©ponse ou d'envoi de requ√™te est initialis√© par les fonctions trySocketRead() et trySocketWrite(), o√π en cas d'erreur plusieurs essais sont r√©alis√©s, le nombre maximum d'essais √©tant d√©fini par la macro MAX_ATTEMPTS.<br>
Il est int√©ressant d'essayer plusieurs fois de lire ou d'√©crire dans le socket, la connexion √©tant d√©j√† r√©alis√©e.<br>Fichier concern√© : <a href="doxygen/sockets_8h.htm" target="_blank" rel="noopener nofollow">sockets.h</a>. Par ailleurs ce fichier contient d'autres macros comme l'adresse IP li√©e au socket, le port, et autres fonctions permettant de faciliter la connexion.<br>Dans le diagramme suivant, l'interface de gestion de client cr√©√© une nouvelle connexion avec le serveur lors de l'ajout d'un philosophe (client). <br>Il envoie une requ√™te de cr√©ation de philosophe et reste en attente d'une r√©ponse, le serveur de son c√¥t√© re√ßoit la requ√™te, cr√©e le philosophe puis envoi le nouveau philosophe en r√©ponse.<br>Le cycle de vie du philosophe dans son thread cot√© client commence alors, et envoi une requ√™te de mise √† jour toutes les secondes.<br>Tout le processus de cr√©ation du philosophe est d√©taill√© dans <a data-href="3.5. Ajout de philosophes" href="3.-fonctionnement/3.5.-ajout-de-philosophes.html" class="internal-link" target="_self" rel="noopener nofollow">3.5. Ajout de philosophes</a>.<br>
Tout le processus de mise √† jour du philosophe est d√©taill√© dans <a data-tooltip-position="top" aria-label="3.6. Mise √† jour d'un philosophe" data-href="3.6. Mise √† jour d'un philosophe" href="3.-fonctionnement/3.6.-mise-√†-jour-d'un-philosophe.html" class="internal-link" target="_self" rel="noopener nofollow">3.6. Cycle de vie d'un philosophe.</a><br>]]></description><link>3.-fonctionnement/3.3.-communication-r√©seau.html</link><guid isPermaLink="false">3. Fonctionnement/3.3. Communication r√©seau.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 22:15:04 GMT</pubDate></item><item><title><![CDATA[3.4. Gestion du risque d'inter-blocage]]></title><description><![CDATA[ 
 <br><br><br>Il y a un risque d'inter-blocage o√π chaque client a d√©j√† pris une baguette et attendent que l'autre baguette se lib√®re. <br><img alt="interblocage.png" src="lib/media/interblocage.png"><br>Une politique de pr√©vention est utilis√©e. <br>Dans le probl√®me des philosophes, on sait exactement combien d'entre eux peuvent manger en m√™me temps au maximum&nbsp;: c'est leur nombre total divis√© par 2 et arrondi √† l'entier den dessous.<br>Avant qu'un client souhaite prendre la moindre baguette, le serveur doit v√©rifier si ce nombre maximum est atteint. Si ce n'est pas le cas, il peut dans lordre&nbsp;:<br>
<br>incr√©menter ce nombre
<br>v√©rifier que l'√©tat d'une baguette puis d'une autre
<br>si les deux sont libres laisser le client prendre une baguette puis l'autre, sinon il attend qu'une des deux se lib√®re<br>
Sinon il attend que ce nombre baisse pour effectuer ces v√©rifications.
<br>Lorsque le client a fini de manger, les baguettes sont d'abord restitu√©es avant que le serveur d√©clare un client en moins en train de manger.<br>Pour le compteur sera mat√©rialis√© dans le code par un s√©maphore d√©cr√©mental, et les baguettes par un s√©maphore binaire.<br>Exemple avec 4 clients et un sc√©nario peu id√©al<br><img alt="solution_interblocage_1.png" src="lib/media/solution_interblocage_1.png"><br>
<br>Le client 1 est pr√™t √† manger, il demande l'autorisation au serveur, qui incr√©mente le nombre courant et accepte car le nombre maximum de clients en train de manger n'est pas atteint. En r√©alit√©, un s√©maphore sera d√©cr√©ment√©. 
<br><img alt="solution_interblocage_2.png" src="lib/media/solution_interblocage_2.png"><br>
<br>Le client 1 a eu le temps de prendre une premi√®re baguette mais pas la seconde, et le client 2 est pr√™t √† manger. Le serveur incr√©mente le nombre courant et accepte. 
<br><img alt="solution_interblocage_3.png" src="lib/media/solution_interblocage_3.png"><br>
<br>Dans le pire des sc√©narios, le client 2 a encore √©t√© plus rapide et prend la baguette 2. Le client 1 en a besoin, il reste pr√™t √† prendre la baguette d√®s qu'elle se lib√®re. Le client 3 est pr√™t et le serveur lui refuse de manger, il attend qu'une place se lib√®re.
<br><img alt="solution_interblocage_4.png" src="lib/media/solution_interblocage_4.png"><br>
<br>Le client 2 prend la baguette 3 et mange pendant X secondes. Le client 1 attend toujours que la baguette 2 se lib√®re. Quand le client 2 aura fini de manger il pourra restituer les baguettes et le compteur baissera de 1, laissant la place au client 3.
<br>Concr√®tement, le s√©maphore de compteur principal se trouve dans la structure  <a href="doxygen/struct_shared_resources.html" target="_blank" rel="noopener nofollow">SharedResources</a>, membre nomm√© maxAllowedEating.<br>Chaque baguette √† son s√©maphore binaire d'utilisation dans sa structure <a href="doxygen/struct_chopstick.html" target="_blank" rel="noopener nofollow">Chopstick</a>, membre nomm√© usage.]]></description><link>3.-fonctionnement/3.4.-gestion-du-risque-d&apos;inter-blocage.html</link><guid isPermaLink="false">3. Fonctionnement/3.4. Gestion du risque d&apos;inter-blocage.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 22:16:49 GMT</pubDate><enclosure url="lib/media/interblocage.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/interblocage.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.5. Ajout de philosophes]]></title><description><![CDATA[ 
 <br><br><br>L'ajout de philosophe se trouve dans la fonction <a href="doxygen/_server_philosopher_8c.html" target="_blank" rel="noopener nofollow">createPhilosopher() du fichier ServerPhilosopher.c</a>.<br>Ce syst√®me d'ajout de philosophes √† la vol√©e a n√©cessit√© un s√©maphore suppl√©mentaire et plusieurs autres mesures.<br>Lorsque le serveur souhaite r√©pondre √† la requ√™te et ajouter un philosophe dans le syst√®me, le processus fils sera d√©j√† lanc√©.<br>S'il y a besoin d'ajouter plusieurs philosophes en m√™me temps, la parall√©lisation causera √† un moment ou √† un autre des probl√®mes dans la m√©moire partag√©e, les philosophes n'ont pas de priorit√© d√©finie.<br>Pour s'assurer que chaque philosophe se cr√©e un par un, un s√©maphore binaire philosopherCreationProcessest utilis√© (<a href="doxygen/struct_shared_resources.htm" target="_blank" rel="noopener nofollow">SharedResources.h</a>).<br><br><br><br>Ajouter un philosophe signifie nouvelle baguette, donc r√©-assignation de la baguette √† droite de l'avant-dernier philosophe<br>Par d√©faut, aucun philosophe n'existe.<br>
Au premier ajout, le nombre minimum de philosophes requis pour faire fonctionner le syst√®me est de 2.<br>Pour chaque philosophe ajout√© (sch√©ma&nbsp;: ajout d'un philosophe 5), une baguette est √©galement ajout√©e et mat√©rialis√©e √† sa gauche. Le philosophe qui √©tait dernier (philosophe 4) avant qu'il y en ait de nouveaux doit se voir attribuer √† sa droite la premi√®re nouvelle baguette (baguette 5).<br>Si ce philosophe √©tait en train de manger, il faut attendre qu'il n'utilise plus sa baguette actuelle avant de la red√©finir, o√π il lib√©rera  la mauvaise baguette dans le d√©roul√© du processus.<br>Enfin le nouveau client se voit attribuer √† sa droite la toute premi√®re baguette du syst√®me (baguette 1).<br><img alt="Attribution.png" src="lib/media/attribution.png"><br>Un sch√©ma lin√©aris√© et plus simple qui illustre l'assignation avec seulement 2 philosophes.<br><img alt="reassignation.png" src="lib/media/reassignation.png"><br>
<br>Le philosophe 1 est cr√©√© et a d√©j√† sa baguette √† gauche
<br>Le philosophe 2 est cr√©√© et cr√©√© sa baguette √† gauche
<br>Le philosophe 2 assigne √† sa droite la premi√®re baguette
<br>Le philosophe 1 se voit r√©assigner la nouvelle baguette √† sa droite
]]></description><link>3.-fonctionnement/3.5.-ajout-de-philosophes.html</link><guid isPermaLink="false">3. Fonctionnement/3.5. Ajout de philosophes.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 22:19:02 GMT</pubDate><enclosure url="lib/media/attribution.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib/media/attribution.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3.6. Mise √† jour d'un philosophe]]></title><description><![CDATA[ 
 <br><br><br>Ci-dessous le diagramme complet de la mise √† jour du philosophe lors de la r√©ception d'une requ√™te de mise √† jour (passage de la souris pour zoomer puis scroll horizontal).<br>
Quelques explications plus bas.<br><br><br><br>La fonction updatePhilosopher dans <a href="doxygen/_server_philosopher_8c.html" target="_blank" rel="noopener nofollow">ServerPhilosopher.c</a> est reponsable de cette gestion.<br>Elle retourne le pointeur du philosophe mis √† jour si une r√©ponse doit √™tre renvoy√©e au client (dans le cas d'une autorisation pour manger), sinon elle ne retourne rien (NULL) pour se contenter de mettre √† jour l'√©tat.<br>D'abord le philosophe c√¥t√© serveur est r√©cup√©r√© √† partir de celui envoy√© par le client (via le membre id). S'il n'est pas trouv√© (ce qui est tr√®s improbable dans ce projet mais contr√¥l√© par principe), rien ne se passe et NULL est retourn√©.<br>Si le philosophe pense, on compare avec l'√©tat pr√©c√©dent pour prendre en compte un passage de EATING √† THINKING, auquel cas les baguettes sont lib√©r√©es puis le compteur globale.<br>L'ordre est assez important, car si un philosophe voisin avait pu prendre le compteur et en attente d'une baguette , il sera en mesure de la prendre imm√©diatement avant que le voisin de l'autre c√¥t√© prenne potentiellement le pas en r√©cup√©rant le compteur tout juste lib√©r√© et la baguette (petite notion de priorit√©).<br>Enfin le philosophe en m√©moire partag√©e est mise √† jour et le nouvel √©tat est loggu√©.<br>Si le philosophe est en train de manger, on se contente de mettre √† jour en m√©moire partag√©e et de logguer le nouvel √©tat.<br>S'il a faim, il tente de prendre une place dans le compteur global avec sem_trywait une premi√®re fois, en mode non-bloquant. Si la baguette est occup√©e on peut alors logguer l'√©tat d'attente puis bloquer avec sem_wait. <br>D√®s que le s√©maphore du compteur lib√®re une place, on effectue exactement les m√™mes v√©rifications pour la baguette gauche et la droite.<br>Enfin le philosophe peut manger, il est retourn√© par la fonction et le client re√ßoit son nouvel √©tat EATING, insinuant une autorisation.]]></description><link>3.-fonctionnement/3.6.-mise-√†-jour-d&apos;un-philosophe.html</link><guid isPermaLink="false">3. Fonctionnement/3.6. Mise √† jour d&apos;un philosophe.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 22:20:10 GMT</pubDate></item><item><title><![CDATA[1. Interpr√©tation et objectifs]]></title><description><![CDATA[ 
 <br><br><br>Chaque philosophe sera repr√©sent√© par un client.<br>Le serveur repr√©sentera la table des philosophes sur laquelle reposent les baguettes. Il devra orchestrer les clients entre eux pour leur donner l'accord de manger ou d'attendre que des baguettes se lib√®rent.<br>Chaque connexion client sera g√©r√©e dans un processus fils du serveur (serveur parall√®le). <br>L'√©tat des baguettes et des clients (entre autres) devront √™tre stock√©s dans un segment de m√©moire partag√©e.<br>Le programme principal sera une interface de gestion des clients, d'o√π il sera possible d'en ajouter autant que souhait√© (choix personnel qui m'aura co√ªt√© beaucoup de temps...).<br>Chaque client vivra dans un thread du programme principal, √† la fois dans un but p√©dagogique, car le serveur exploitera d√©j√† principalement les processus, et aussi, car un thread sera suffisant dans cette situation. <br>Le client doit se connecter au serveur pour se voir d'abord attribuer un identifiant N + 1 o√π N est la somme des clients et baguettes confondus, qui indique √©galement sa place sur la table des philosophes. Une baguette N + 2 est alors ajout√©e. <br>Info
M√™me si en pratique le processus client a acc√®s √† l'index de chaque philosophe (structure en threads = m√™me espace d'adressage, et l'ajout de philosophes √† la vol√©e oblige √† connaitre cette valeur), dans l'id√©al c'est le serveur qui doit attribuer ces identifiants car c'est lui qui s'occupe de la coordination des clients. 
<br>Par d√©faut, un client pense sur une dur√©e al√©atoire qu'il s'attribue, et communique avec le serveur √† chaque seconde pass√©e √† manger ou √† penser.<br>Lorsque le client a fini de penser, il envoie une requ√™te au serveur, pour lui demander de manger, il sera alors mis en attente ou se voir attribuer les baguettes<br>Chaque changement d'√©tat des clients doit √™tre loggu√© en manipulant des fichiers, en distinguant plusieurs types de logs :<br>
<br>Les logs d'information √† des fins de debug, pour voir les ressources cr√©√©es et les adresses en m√©moire. 
<br>Les logs d'√©tat des philosophes pour voir leur √©tat √† chaque instant.
<br>Ces logs seront visibles dynamiquement avec la commande tail.<br>Le processus serveur principal s'occupera de ces logs dans plusieurs threads diff√©rents via une file de message IPC, en utilisant le type de message pour les distinguer, et pour que chaque log soit re√ßu dans l'ordre dans lequel ils arrivent (FIFO).<br>Un thread du processus principal s'occupera de recevoir le type 1 qui correspondra aux logs d'informations g√©n√©rales. Puis chaque client connect√© fera cr√©er au processus principal un thread suppl√©mentaire de log par client. Le type correspondra √† l'ID du processus fils de service.<br>En cas d'arr√™t du programme principal et des clients, le serveur notifie tout les processus fils de s'arr√™ter, via un signal. Puis, il ferme les sockets, d√©truit les ressources partag√©es et lib√®re la m√©moire.]]></description><link>1.-interpr√©tation-et-objectifs.html</link><guid isPermaLink="false">1. Interpr√©tation et objectifs.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 21:08:21 GMT</pubDate></item><item><title><![CDATA[2. Utilisation]]></title><description><![CDATA[ 
 <br><br><br>Pour mieux suivre ce guide, il est possible de pr√©parer maintenant les diff√©rentes consoles qui seront utilis√©es.<br>2 consoles scind√©es horizontalement : ces deux consoles permettront de suivre les deux processus principaux : <br>
<br>le serveur
<br>l'interface de gestion de clients
<br><img alt="Capture d‚Äô√©cran 2025-02-12 √† 13.28.10.png" src="_assets_/capture-d‚Äô√©cran-2025-02-12-√†-13.28.10.png"><br>1 console de suivi de logs : celle-ci permettra de visionner les logs principaux du serveur, permettant de v√©rifier les t√¢ches de cr√©ation de philosophes et de baguettes, et les adresses m√©moire utilis√©es.<br>5 consoles scind√©es horizontalement : il y aura un fichier de log √† suivre par philosophe, tous g√©r√©s parall√®lement, pour visionner dynamiquement leur √©tat c√¥t√© serveur.<br><br><br>Pour d√©marrer le processus serveur principal, depuis la racine du projet, utiliser la commande suivante pour compiler le fichier et l'ex√©cuter imm√©diatement dans la premi√®re console : <br>cd src &amp;&amp; gcc server.c -o ./server &amp;&amp; ./server
<br>Une fois lanc√©, il reste √† l'√©coute de connexions clients. <br><img alt="Capture d‚Äô√©cran 2025-02-11 √† 22.09.29.png" src="_assets_/capture-d‚Äô√©cran-2025-02-11-√†-22.09.29.png"><br><br><br>Une premi√®re indication est donn√©e concernant les logs, il est possible de copier-coller la commande tail donn√©e dans une autre console (la deuxi√®me sur les cinq pr√©par√©es) pour suivre les logs d'information du serveur en direct. Le fichier concern√© fait partie int√©grante de la <a data-tooltip-position="top" aria-label="4. Arborescence" data-href="4. Arborescence" href="4.-arborescence.html" class="internal-link" target="_self" rel="noopener nofollow">structure du projet</a>.<br>Ou plus simplement, depuis la racine du projet et dans l'autre console, faire la commande suivante : <br>tail -f logs/server.log
<br><br><br>Depuis la racine du projet, dans un troisi√®me terminal, la commande suivante permet de compiler et ex√©cuter le processus de gestion des clients. <br>cd src &amp;&amp; gcc main.c -o ./main &amp;&amp; ./main
<br>Il permettra ensuite d'ajouter des philosophes √† la vol√©e.<br><img alt="Capture d‚Äô√©cran 2025-02-11 √† 22.22.44.png" src="_assets_/capture-d‚Äô√©cran-2025-02-11-√†-22.22.44.png"><br><br><br>Une fois le processus de gestion de client lanc√©, on voit plusieurs choses : <br>
<br>Le nombre de philosophes autour de la table (0)
<br>Le maximum possible (7, configur√© dans <a href="doxygen/maxmin__philosophers_8h.html" target="_blank" rel="noopener nofollow">maxmin_philosophers.h</a>
<br>Le nombre de places restantes (7)
<br>Il est maintenant possible d'√©crire deux types de commandes : <br>
<br>/add NOMBRE : pour ajouter le nombre de philosophes souhait√©s. Il est possible d'en ajouter 2, puis 3, puis 1 etc. Jusqu'√† la limite autoris√©e.
<br>/quit: pour fermer l'interface.
<br>D'abord avec 2 philosophes : <br>/add 2
<br><img alt="Capture d‚Äô√©cran 2025-02-12 √† 19.47.24.png" src="_assets_/capture-d‚Äô√©cran-2025-02-12-√†-19.47.24.png"><br>Chaque philosophe tentera de se connecter correctement au processus serveur pour envoyer une requ√™te de cr√©ation de philosophe, et le serveur envoi une r√©ponse en retour pour lui donner son identifiant (<a data-href="3.5. Ajout de philosophes" href="3.-fonctionnement/3.5.-ajout-de-philosophes.html" class="internal-link" target="_self" rel="noopener nofollow">3.5. Ajout de philosophes</a>).<br>Le nombre de philosophes c√¥t√© interface clients est bien pass√© √† deux et le nombre de places restantes √† 5.<br>Dans les logs serveur ouverts pr√©c√©demment, on peut voir ceci : <br><img alt="Capture d‚Äô√©cran 2025-02-12 √† 21.20.57.png" src="_assets_/capture-d‚Äô√©cran-2025-02-12-√†-21.20.57.png"><br>Ce qui permet de constater de voir globalement comment les ressources sont utilis√©es et la cr√©ation des baguettes et leurs adresses m√©moire.<br>C√¥t√© terminal principal du serveur : <br><img alt="Capture d‚Äô√©cran 2025-02-12 √† 21.21.46.png" src="_assets_/capture-d‚Äô√©cran-2025-02-12-√†-21.21.46.png"><br>Nous sommes inform√©s que des connexions clients ont bien √©t√© accept√©es, et que le thread de log associ√© au processus enfant du philosophe est bien disponible via la commande donn√©e. Puis le serveur reste √† l'√©coute de nouvelles connexions.<br><br><br>Avec deux philosophes seulement pour l'instant, la lecture des actions et du bon d√©roulement de la synchronisation sera plus facile.<br>Dans deux des 5 consoles pr√©par√©es, lancer les deux commandes tail donn√©es par le serveur lors de la cr√©ation des clients en faisant un copi√©-coll√©&nbsp;: <br><img alt="Capture d‚Äô√©cran 2025-02-12 √† 21.30.51.png" src="_assets_/capture-d‚Äô√©cran-2025-02-12-√†-21.30.51.png"><br><img alt="Capture d‚Äô√©cran 2025-02-12 √† 21.33.53.png" src="_assets_/capture-d‚Äô√©cran-2025-02-12-√†-21.33.53.png"><br>Chaque seconde, le client envoi une requ√™te de mise √† jour au serveur qui prend en compte son √©tat et le log. Si un philosophe a fini de penser, il reste en attente d'une r√©ponse du serveur pour pouvoir manger.<br><br><br>Maintenant, il est possible d'ajouter autant de philosophes que souhait√© tant que la limite n'est pas atteinte, et de visualiser leurs logs dans les autres terminaux.<br>Lorsqu'elle est atteinte, ou en cas d'un /add trop bas ou trop √©lev√© par rapport ce que la console affiche, ou d'une commande qui n'existe pas, un warning sera envoy√© : <br><img alt="Capture d‚Äô√©cran 2025-02-12 √† 21.44.51.png" src="_assets_/capture-d‚Äô√©cran-2025-02-12-√†-21.44.51.png"><br><br><br>La commande /quitpermet de quitter le programme, mais Ctrl + Cpeut aussi √™tre utilis√©.<br>Quelle que soit la mani√®re dont sont interrompus les clients ou le serveur, le serveur g√®re la destruction des ressources en les centralisant dans une structure <a href="doxygen/_server_context_8h.html" target="_blank" rel="noopener nofollow">ServerContext</a> (voir <a data-href="3.1. Aper√ßu global" href="3.-fonctionnement/3.1.-aper√ßu-global.html" class="internal-link" target="_self" rel="noopener nofollow">3.1. Aper√ßu global</a>).<br><img alt="Capture d‚Äô√©cran 2025-02-13 √† 13.01.40.png" src="_assets_/capture-d‚Äô√©cran-2025-02-13-√†-13.01.40.png"><br><br><br>Le serveur est d√©velopp√© de mani√®re √† correctement lib√©rer toutes les ressources des m√©canismes IPC, m√™me en cas d'interruption soudaine.<br>Mais en cas de probl√®me particulier ou inattendu, utiliser la commande suivante depuis la racine du projet pour ex√©cuter le script remove_ipcs.sh: <br>sh remove_ipcs.sh
]]></description><link>2.-utilisation.html</link><guid isPermaLink="false">2. Utilisation.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 22:09:30 GMT</pubDate><enclosure url="_assets_/capture-d‚Äô√©cran-2025-02-12-√†-13.28.10.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;_assets_/capture-d‚Äô√©cran-2025-02-12-√†-13.28.10.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[4. Arborescence]]></title><description><![CDATA[ 
 <br><br><br>La documentation Doxygen compl√®te est disponible <a href="doxygen/index.html" target="_blank" rel="noopener nofollow">ici</a>, mais il est possible de se rendre directement sur les fichiers concern√©s en passant par cette page (<a href="doxygen/files.html" target="_blank" rel="noopener nofollow">ou voir l'arborescence sur Doxygen directement</a>).<br>
<br>remove_ipcs.sh : script bash pour supprimer les m√©canismes IPC encore pr√©sents dans le syst√®me en cas de probl√®me inattendu pendant le d√©veloppement.
<br>include/ :

<br>entities/ : la d√©finition des structures.

<br><a href="doxygen/_logs_8h.html" target="_blank" rel="noopener nofollow">Logs.h</a>
<br><a href="doxygen/_philosopher_8h.html" target="_blank" rel="noopener nofollow">Philosopher.h</a>
<br><a href="doxygen/_request_8h.html" target="_blank" rel="noopener nofollow">Request.h</a>
<br><a href="doxygen/_response_8h.html" target="_blank" rel="noopener nofollow">Response.h</a>
<br><a href="doxygen/_server_context_8h.html" target="_blank" rel="noopener nofollow">ServerContext.h</a>
<br><a href="doxygen/_server_philosopher_8h.html" target="_blank" rel="noopener nofollow">ServerPhilosopher.h</a>
<br><a href="doxygen/_shared_resources_8h.html" target="_blank" rel="noopener nofollow">SharedResources.h</a>
<br><a href="doxygen/_chopstick_8h.html" target="_blank" rel="noopener nofollow">Chopstick.h</a>
<br><a href="doxygen/_client_philosopher_8h.html" target="_blank" rel="noopener nofollow">ClientPhilosopher.h</a>


<br>managers/ : les fonctions li√©es aux structures pour celles qui en ont besoin.

<br><a href="doxygen/_chopstick_8c.html" target="_blank" rel="noopener nofollow">Chopstick.c</a>
<br><a href="doxygen/_logs_8c.html" target="_blank" rel="noopener nofollow">Logs.c</a>
<br><a href="doxygen/_response_8c.html" target="_blank" rel="noopener nofollow">Response.c</a>
<br><a href="doxygen/_server_philosopher_8c.html" target="_blank" rel="noopener nofollow">ServerPhilosopher.c</a>
<br><a href="doxygen/_shared_resources_8c.html" target="_blank" rel="noopener nofollow">SharedResources.c</a>
<br><a href="doxygen/_request_8c.html" target="_blank" rel="noopener nofollow">Request.c</a>
<br><a href="doxygen/_server_context_8c.html" target="_blank" rel="noopener nofollow">ServerContext.c</a>


<br>utils/ : les fonctions utiles partag√©es entre les deux programmes. 

<br><a href="doxygen/commands_8h.html" target="_blank" rel="noopener nofollow">commands.h</a>
<br><a href="" target="_blank" rel="noopener nofollow">files.h</a>
<br><a href="doxygen/print__message_8h.html" target="_blank" rel="noopener nofollow">print_message.h</a>
<br><a href="doxygen/random_8h.html" target="_blank" rel="noopener nofollow">random.h</a>
<br><a href="doxygen/sockets_8h.html" target="_blank" rel="noopener nofollow">sockets.h</a>




<br>logs/ : 

<br>client/ : tous les logs client automatiquement g√©n√©r√©s √† l'ajout de philosophes. Les fichiers de logs sont de la forme suivante : 

<br>client_PID.log 


<br>server.log: les logs d'information du serveur.


<br>src/ : 

<br><a href="doxygen/main_8c.html" target="_blank" rel="noopener nofollow">main.c</a>
<br><a href="doxygen/server_8c.html" target="_blank" rel="noopener nofollow">server.c</a>


]]></description><link>4.-arborescence.html</link><guid isPermaLink="false">4. Arborescence.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 22:06:54 GMT</pubDate></item><item><title><![CDATA[Rapport de projet]]></title><description><![CDATA[ 
 <br><br>Ce rapport se divise en plusieurs parties : <br>
<br><a data-tooltip-position="top" aria-label="1. Interpr√©tation et objectifs.md" data-href="1. Interpr√©tation et objectifs.md" href="1.-interpr√©tation-et-objectifs.html" class="internal-link" target="_self" rel="noopener nofollow">Interpr√©tation de la consigne et d√©finition des objectifs</a>
<br><a data-tooltip-position="top" aria-label="2. Utilisation" data-href="2. Utilisation" href="2.-utilisation.html" class="internal-link" target="_self" rel="noopener nofollow">D√©marrer les programmes et les utiliser</a>
<br><a data-tooltip-position="top" aria-label="3.0. Index" data-href="3.0. Index" href="3.-fonctionnement/3.0.-index.html" class="internal-link" target="_self" rel="noopener nofollow">Fonctionnement g√©n√©ral, choix et architecture</a><br>
<a data-tooltip-position="top" aria-label="3. Fonctionnement/3.1. Aper√ßu global.md" data-href="3. Fonctionnement/3.1. Aper√ßu global.md" href="3.-fonctionnement/3.1.-aper√ßu-global.html" class="internal-link" target="_self" rel="noopener nofollow">3.1. Aper√ßu global du syst√®me</a><br>
<a data-tooltip-position="top" aria-label="3. Fonctionnement/3.2. Interface de gestion des clients.md" data-href="3. Fonctionnement/3.2. Interface de gestion des clients.md" href="3.-fonctionnement/3.2.-interface-de-gestion-des-clients.html" class="internal-link" target="_self" rel="noopener nofollow">3.2. Interface de gestion de clients</a><br>
<a data-tooltip-position="top" aria-label="3. Fonctionnement/3.3. Communication r√©seau.md" data-href="3. Fonctionnement/3.3. Communication r√©seau.md" href="3.-fonctionnement/3.3.-communication-r√©seau.html" class="internal-link" target="_self" rel="noopener nofollow">3.3. Communication r√©seau</a><br>
<a data-tooltip-position="top" aria-label="3. Fonctionnement/3.4. Gestion du risque d'inter-blocage.md" data-href="3. Fonctionnement/3.4. Gestion du risque d'inter-blocage.md" href="3.-fonctionnement/3.4.-gestion-du-risque-d'inter-blocage.html" class="internal-link" target="_self" rel="noopener nofollow">3.4. Gestion du risque d'inter-blocage</a><br>
<a data-tooltip-position="top" aria-label="3. Fonctionnement/3.5. Ajout de philosophes.md" data-href="3. Fonctionnement/3.5. Ajout de philosophes.md" href="3.-fonctionnement/3.5.-ajout-de-philosophes.html" class="internal-link" target="_self" rel="noopener nofollow">3.5. Ajout de philosophes</a><br>
<a data-tooltip-position="top" aria-label="3.6. Mise √† jour d'un philosophe" data-href="3.6. Mise √† jour d'un philosophe" href="3.-fonctionnement/3.6.-mise-√†-jour-d'un-philosophe.html" class="internal-link" target="_self" rel="noopener nofollow">3.6. Mise √† jour d'un philosophe</a>
<br><a data-tooltip-position="top" aria-label="4. Arborescence" data-href="4. Arborescence" href="4.-arborescence.html" class="internal-link" target="_self" rel="noopener nofollow">Arborescence du projet</a>
<br><a href="doxygen/index.html" target="_blank" rel="noopener nofollow">Le code en d√©tail dans une documentation Doxygen</a> 
<br>Des liens directs vers certaines parties de la documentation Doxygen peuvent √™tre pr√©sents au fil de la lecture du rapport pour apporter plus de contexte √† certaines explications.<br><br><br>
<br>D√©veloppement sur MacOS (VSCode) et tests sur une machine virtuelle Ubuntu 22.04.2. Certaines fonctions de base des s√©maphores et des signaux sont d√©pr√©ci√©es sur Mac et fonctionnent tr√®s mal.
<br>Valgrind pour d√©boguer la gestion de la m√©moire
<br>Obisdian pour la r√©daction du rapport (Markdown, Mermaid pour les diagrammes)
<br>Doxygen pour g√©n√©rer la documentation au format HTML √† partir des docstring
<br>Beaucoup de temps et d'huile de coude
<br>
 
 
 
 
 <br><a href="https://github.com/charliegene14/NSY-103-Linux" target="_blank" rel="noopener nofollow">Repository</a><br><a href="https://charliegene14.github.io/NSY-103-Linux" target="_blank" rel="noopener nofollow">Documentation</a> <br><br><br>Vous utiliserez les notions et fonctions vues en cours pour programmer le probl√®me des philosophes, tel qu'il est d√©fini dans le TD de la s√©ance 10. Vous utiliserez les sockets comme technique principale.<br>Quote
5 philosophes chinois se retrouvent dans un restaurant pour d√©jeuner.<br>
Le restaurateur leur propose une table ronde sur laquelle il dispose 5 bols et 5 baguettes (une entre chaque bol).<br>
Chaque philosophe passe son repas √† penser (pendant une dur√©e al√©atoire), puis √† manger un peu (pendant une dur√©e al√©atoire), puis √† penser...
<br>Remarque
Pour pouvoir manger, un philosophe doit pouvoir prendre 2 baguettes : celle √† sa gauche et celle √† sa droite.
]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><dc:creator><![CDATA[DENIER Charlie]]></dc:creator><pubDate>Thu, 13 Feb 2025 23:02:13 GMT</pubDate></item></channel></rss>